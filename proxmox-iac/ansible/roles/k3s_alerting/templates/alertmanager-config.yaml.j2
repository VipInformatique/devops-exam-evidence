# Alertmanager config for Devistor
# - Keeps existing routing (critical/warning/default)
# - Adds a daily Watchdog heartbeat to prove the alerting chain works
# - Uses safe time formatting: .StartsAt.Local.Format "YYYY-MM-DD HH:MM:SS TZ"

route:
  receiver: "devistor-default"
  group_by: ["alertname","severity","namespace","job"]
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 2h

  routes:
    # --- HEARTBEAT / WATCHDOG (daily OK ping) ---
    # Matches the always-firing `Watchdog` alert and sends a daily message to Telegram.
    - receiver: "devistor-heartbeat"
      matchers: [ 'alertname="Watchdog"' ]
      group_wait: 10s
      group_interval: 1h
      repeat_interval: 24h

    # --- CRITICAL incidents to on-call ---
    - receiver: "devistor-critical"
      matchers: [ 'severity="critical"' ]
      group_wait: 10s
      group_interval: 1m
      repeat_interval: 1h

    # --- WARNING signals to ops ---
    - receiver: "devistor-ops"
      matchers: [ 'severity="warning"' ]
      group_wait: 15s
      group_interval: 2m
      repeat_interval: 2h

    # --- Sink / drop noisy alerts (no notifications on purpose) ---
    - receiver: "devistor-drop"
      matchers:
        - alertname=~"Kube(Scheduler|ControllerManager|Proxy)Down"

# Inhibit lower-severity alerts when a matching critical is already firing for the same object.
inhibit_rules:
  - source_matchers: [ 'severity="critical"' ]
    target_matchers: [ 'severity="warning"' ]
    equal: ["alertname","namespace","pod","instance","node","persistentvolumeclaim","mountpoint"]

receivers:
  # Default Telegram receiver (ops channel)
  - name: "devistor-default"
    telegram_configs:
      - bot_token: "{{ telegram_bot_token }}"
        chat_id: {{ telegram_chat_id_ops | int }}
        send_resolved: true
        message: |-
          {% raw -%}
          [{{ .Status | toUpper }}] {{ if .GroupLabels.alertname }}{{ .GroupLabels.alertname }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
          {{- range .Alerts }}
          â€¢ {{ .Labels.alertname }}
            where:{{ if .Labels.namespace }} ns={{ .Labels.namespace }}{{ end }}{{ if .Labels.pod }} pod={{ .Labels.pod }}{{ end }}{{ if .Labels.node }} node={{ .Labels.node }}{{ else if .Labels.instance }} instance={{ .Labels.instance }}{{ end }}{{ if .Labels.persistentvolumeclaim }} pvc={{ .Labels.persistentvolumeclaim }}{{ end }}{{ if .Labels.mountpoint }} mount={{ .Labels.mountpoint }}{{ end }}{{ if .Labels.schedule }} schedule={{ .Labels.schedule }}{{ end }}{{ if .Labels.vm_name }} vm={{ .Labels.vm_name }}{{ end }}{{ if .Labels.vm_id }} vmid={{ .Labels.vm_id }}{{ end }}{{ if .Labels.datastore }} ds={{ .Labels.datastore }}{{ end }}
            why: {{ if .Annotations.summary }}{{ .Annotations.summary }}{{ else if .Annotations.description }}{{ .Annotations.description }}{{ else }}(no summary){{ end }}
            when: fired={{ .StartsAt.Local.Format "2006-01-02 15:04:05 MST" }}{{ if eq .Status "resolved" }}, resolved={{ .EndsAt.Local.Format "2006-01-02 15:04:05 MST" }}{{ end }}
          {{- else }}(no alerts in group){{- end }}
          {%- endraw %}

  # Ops (warnings)
  - name: "devistor-ops"
    telegram_configs:
      - bot_token: "{{ telegram_bot_token }}"
        chat_id: {{ telegram_chat_id_ops | int }}
        send_resolved: true
        message: |-
          {% raw -%}
          [{{ .Status | toUpper }}] {{ if .GroupLabels.alertname }}{{ .GroupLabels.alertname }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
          {{- range .Alerts }}
          â€¢ {{ .Labels.alertname }}
            where:{{ if .Labels.namespace }} ns={{ .Labels.namespace }}{{ end }}{{ if .Labels.pod }} pod={{ .Labels.pod }}{{ end }}{{ if .Labels.node }} node={{ .Labels.node }}{{ else if .Labels.instance }} instance={{ .Labels.instance }}{{ end }}{{ if .Labels.persistentvolumeclaim }} pvc={{ .Labels.persistentvolumeclaim }}{{ end }}{{ if .Labels.mountpoint }} mount={{ .Labels.mountpoint }}{{ end }}{{ if .Labels.schedule }} schedule={{ .Labels.schedule }}{{ end }}{{ if .Labels.vm_name }} vm={{ .Labels.vm_name }}{{ end }}{{ if .Labels.vm_id }} vmid={{ .Labels.vm_id }}{{ end }}{{ if .Labels.datastore }} ds={{ .Labels.datastore }}{{ end }}
            why: {{ if .Annotations.summary }}{{ .Annotations.summary }}{{ else if .Annotations.description }}{{ .Annotations.description }}{{ else }}(no summary){{ end }}
            when: fired={{ .StartsAt.Local.Format "2006-01-02 15:04:05 MST" }}{{ if eq .Status "resolved" }}, resolved={{ .EndsAt.Local.Format "2006-01-02 15:04:05 MST" }}{{ end }}
          {{- else }}(no alerts in group){{- end }}
          {%- endraw %}

  # Critical (on-call)
  - name: "devistor-critical"
    telegram_configs:
      - bot_token: "{{ telegram_bot_token }}"
        chat_id: {{ telegram_chat_id_oncall | int }}
        send_resolved: true
        message: |-
          {% raw -%}
          [{{ .Status | toUpper }}] {{ if .GroupLabels.alertname }}{{ .GroupLabels.alertname }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
          {{- range .Alerts }}
          ðŸ”´ {{ .Labels.alertname }}
            where:{{ if .Labels.namespace }} ns={{ .Labels.namespace }}{{ end }}{{ if .Labels.pod }} pod={{ .Labels.pod }}{{ end }}{{ if .Labels.node }} node={{ .Labels.node }}{{ else if .Labels.instance }} instance={{ .Labels.instance }}{{ end }}{{ if .Labels.persistentvolumeclaim }} pvc={{ .Labels.persistentvolumeclaim }}{{ end }}{{ if .Labels.mountpoint }} mount={{ .Labels.mountpoint }}{{ end }}{{ if .Labels.schedule }} schedule={{ .Labels.schedule }}{{ end }}{{ if .Labels.vm_name }} vm={{ .Labels.vm_name }}{{ end }}{{ if .Labels.vm_id }} vmid={{ .Labels.vm_id }}{{ end }}{{ if .Labels.datastore }} ds={{ .Labels.datastore }}{{ end }}
            why: {{ if .Annotations.summary }}{{ .Annotations.summary }}{{ else if .Annotations.description }}{{ .Annotations.description }}{{ else }}(no summary){{ end }}
            when: fired={{ .StartsAt.Local.Format "2006-01-02 15:04:05 MST" }}{{ if eq .Status "resolved" }}, resolved={{ .EndsAt.Local.Format "2006-01-02 15:04:05 MST" }}{{ end }}
          {{- else }}(no alerts in group){{- end }}
          {%- endraw %}

  # Heartbeat (daily Watchdog OK message)
  - name: "devistor-heartbeat"
    telegram_configs:
      - bot_token: "{{ telegram_bot_token }}"
        chat_id: {{ telegram_chat_id_ops | int }}  # albo dedykowany kanaÅ‚
        send_resolved: true
        message: |-
          {% raw -%}
          âœ… Watchdog OK
          {{- range .Alerts }}
          when: fired={{ .StartsAt.Local.Format "2006-01-02 15:04:05 MST" }}{{ if eq .Status "resolved" }}, resolved={{ .EndsAt.Local.Format "2006-01-02 15:04:05 MST" }}{{ end }}
          {{- end }}
          (Prometheus â†’ Alertmanager â†’ Telegram)
          {%- endraw %}


  # Sink / drop receiver (no outputs)
  - name: "devistor-drop"
