{
  "__inputs": [
    {
      "name": "DS_PROM",
      "label": "Prometheus",
      "type": "datasource",
      "pluginId": "prometheus",
      "pluginName": "Prometheus"
    }
  ],
  "__requires": [
    { "type": "grafana", "id": "grafana", "name": "Grafana", "version": "10.x" },
    { "type": "panel", "id": "timeseries", "name": "Time series", "version": "10.x" },
    { "type": "panel", "id": "stat", "name": "Stat", "version": "10.x" },
    { "type": "datasource", "id": "prometheus", "name": "Prometheus", "version": "2.x" }
  ],
  "title": "Devistor — DevSecOps Core (prod/dev by job)",
  "uid": "devistor-devsecops-core-v2",
  "timezone": "browser",
  "style": "dark",
  "editable": true,
  "time": { "from": "now-6h", "to": "now" },
  "timepicker": { "refresh_intervals": ["10s", "30s", "1m", "5m"] },
  "templating": {
    "list": [
      { "name": "DS_PROM", "label": "Prometheus", "type": "datasource", "query": "prometheus" },
      {
        "name": "job",
        "label": "job (prod/dev)",
        "type": "query",
        "datasource": "$DS_PROM",
        "query": "label_values(flask_http_request_total, job)",
        "includeAll": true,
        "allValue": ".*",
        "current": { "text": "All", "value": ".*" }
      },
      {
        "name": "path",
        "label": "HTTP path",
        "type": "query",
        "datasource": "$DS_PROM",
        "query": "label_values(flask_http_request_duration_seconds_bucket{job=~\"$job\"}, path)",
        "includeAll": true,
        "allValue": ".*",
        "current": { "text": "All", "value": ".*" }
      },
      {
        "name": "slo_latency_threshold",
        "label": "Latency SLO threshold (s)",
        "type": "textbox",
        "query": "0.5",
        "current": { "text": "0.5", "value": "0.5" }
      }
    ]
  },
  "panels": [
    { "type": "row", "title": "SLO & Health", "gridPos": { "x": 0, "y": 0, "w": 24, "h": 1 } },

    {
      "type": "stat",
      "title": "Availability SLO %",
      "gridPos": { "x": 0, "y": 1, "w": 6, "h": 5 },
      "targets": [
        {
          "datasource": "$DS_PROM",
          "expr": "100 * (1 - (sum(rate(flask_http_request_total{job=~\"$job\",status=~\"5..\"}[5m])) / sum(rate(flask_http_request_total{job=~\"$job\"}[5m]))))"
        }
      ],
      "options": { "reduceOptions": { "calcs": ["lastNotNull"] } },
      "fieldConfig": { "defaults": { "unit": "percent", "decimals": 2 } }
    },

    {
      "type": "stat",
      "title": "Latency SLO % (≤ $slo_latency_threshold s)",
      "gridPos": { "x": 6, "y": 1, "w": 6, "h": 5 },
      "targets": [
        {
          "datasource": "$DS_PROM",
          "expr": "100 * (sum(rate(flask_http_request_duration_seconds_bucket{job=~\"$job\",le=\"$slo_latency_threshold\"}[5m])) / sum(rate(flask_http_request_duration_seconds_count{job=~\"$job\"}[5m])))"
        }
      ],
      "options": { "reduceOptions": { "calcs": ["lastNotNull"] } },
      "fieldConfig": { "defaults": { "unit": "percent", "decimals": 2 } }
    },

    {
      "type": "stat",
      "title": "Error rate 5xx %",
      "gridPos": { "x": 12, "y": 1, "w": 6, "h": 5 },
      "targets": [
        {
          "datasource": "$DS_PROM",
          "expr": "100 * (sum(rate(flask_http_request_total{job=~\"$job\",status=~\"5..\"}[5m])) / sum(rate(flask_http_request_total{job=~\"$job\"}[5m])))"
        }
      ],
      "options": { "reduceOptions": { "calcs": ["lastNotNull"] } },
      "fieldConfig": { "defaults": { "unit": "percent", "decimals": 2 } }
    },

    {
      "type": "stat",
      "title": "RPS (all)",
      "gridPos": { "x": 18, "y": 1, "w": 6, "h": 5 },
      "targets": [
        { "datasource": "$DS_PROM", "expr": "sum(rate(flask_http_request_total{job=~\"$job\"}[5m]))" }
      ],
      "options": { "reduceOptions": { "calcs": ["lastNotNull"] } }
    },

    { "type": "row", "title": "Performance", "gridPos": { "x": 0, "y": 6, "w": 24, "h": 1 } },

    {
      "type": "timeseries",
      "title": "HTTP latency (p50/p90/p99, s)",
      "gridPos": { "x": 0, "y": 7, "w": 12, "h": 8 },
      "fieldConfig": { "defaults": { "unit": "s", "decimals": 3 } },
      "options": { "legend": { "displayMode": "list", "placement": "bottom", "showLegend": true }, "tooltip": { "mode": "single", "sort": "none" } },
      "targets": [
        { "datasource": "$DS_PROM", "expr": "histogram_quantile(0.5,  sum by (le) (rate(flask_http_request_duration_seconds_bucket{job=~\"$job\"}[5m])))", "legendFormat": "p50" },
        { "datasource": "$DS_PROM", "expr": "histogram_quantile(0.9,  sum by (le) (rate(flask_http_request_duration_seconds_bucket{job=~\"$job\"}[5m])))", "legendFormat": "p90" },
        { "datasource": "$DS_PROM", "expr": "histogram_quantile(0.99, sum by (le) (rate(flask_http_request_duration_seconds_bucket{job=~\"$job\"}[5m])))", "legendFormat": "p99" }
      ]
    },

    {
      "type": "timeseries",
      "title": "HTTP latency p95 by path (Top 8, s)",
      "gridPos": { "x": 12, "y": 7, "w": 12, "h": 8 },
      "fieldConfig": { "defaults": { "unit": "s", "decimals": 3 } },
      "options": { "legend": { "displayMode": "table", "placement": "right", "showLegend": true }, "tooltip": { "mode": "single", "sort": "none" } },
      "targets": [
        {
          "datasource": "$DS_PROM",
          "expr": "topk(8, histogram_quantile(0.95, sum by (le, path) (rate(flask_http_request_duration_seconds_bucket{job=~\"$job\",path=~\"$path\"}[5m]))))",
          "legendFormat": "{{path}} p95"
        }
      ]
    },

    { "type": "row", "title": "Process resources", "gridPos": { "x": 0, "y": 15, "w": 24, "h": 1 } },

    {
      "type": "timeseries",
      "title": "CPU (process, cores)",
      "gridPos": { "x": 0, "y": 16, "w": 8, "h": 8 },
      "fieldConfig": { "defaults": { "unit": "cores", "decimals": 2 } },
      "targets": [
        { "datasource": "$DS_PROM", "expr": "rate(process_cpu_seconds_total{job=~\"$job\"}[5m])", "legendFormat": "cpu" }
      ]
    },

    {
      "type": "timeseries",
      "title": "Memory RSS (bytes)",
      "gridPos": { "x": 8, "y": 16, "w": 8, "h": 8 },
      "fieldConfig": { "defaults": { "unit": "bytes" } },
      "targets": [
        { "datasource": "$DS_PROM", "expr": "process_resident_memory_bytes{job=~\"$job\"}", "legendFormat": "rss" }
      ]
    },

    {
      "type": "timeseries",
      "title": "Open File Descriptors",
      "gridPos": { "x": 16, "y": 16, "w": 8, "h": 8 },
      "targets": [
        { "datasource": "$DS_PROM", "expr": "process_open_fds{job=~\"$job\"}", "legendFormat": "fds" }
      ]
    },

    { "type": "row", "title": "Business KPIs", "gridPos": { "x": 0, "y": 24, "w": 24, "h": 1 } },

    {
      "type": "stat",
      "title": "Quotes total (all time)",
      "gridPos": { "x": 0, "y": 25, "w": 6, "h": 5 },
      "targets": [
        { "datasource": "$DS_PROM", "expr": "max(devistor_devis_generes_total{job=~\"$job\"})" }
      ],
      "options": { "reduceOptions": { "calcs": ["lastNotNull"] } }
    },

    {
      "type": "stat",
      "title": "Quotes/min (rate)",
      "gridPos": { "x": 6, "y": 25, "w": 6, "h": 5 },
      "targets": [
        { "datasource": "$DS_PROM", "expr": "sum(rate(devistor_devis_generes_total{job=~\"$job\"}[5m]))" }
      ],
      "options": { "reduceOptions": { "calcs": ["lastNotNull"] } }
    },

    {
      "type": "stat",
      "title": "Uptime (hours)",
      "gridPos": { "x": 12, "y": 25, "w": 6, "h": 5 },
      "targets": [
        { "datasource": "$DS_PROM", "expr": "(time() - max(process_start_time_seconds{job=~\"$job\"})) / 3600" }
      ],
      "options": { "reduceOptions": { "calcs": ["lastNotNull"] } },
      "fieldConfig": { "defaults": { "unit": "h", "decimals": 1 } }
    },

    {
      "type": "timeseries",
      "title": "4xx / 5xx breakdown (req/s)",
      "gridPos": { "x": 18, "y": 25, "w": 6, "h": 8 },
      "targets": [
        { "datasource": "$DS_PROM", "expr": "sum(rate(flask_http_request_total{job=~\"$job\",status=~\"4..\"}[5m]))", "legendFormat": "4xx" },
        { "datasource": "$DS_PROM", "expr": "sum(rate(flask_http_request_total{job=~\"$job\",status=~\"5..\"}[5m]))", "legendFormat": "5xx" }
      ]
    }
  ],
  "refresh": "30s"
}
